import React, { Component } from 'react'
import { findDOMNode } from 'react-dom'
import PropTypes from 'prop-types'
import Box from '@hennessyevan/aluminum-box'
import { IconButton } from '../../buttons'
import { Popover } from '../../popover'
import { Tooltip } from '../../tooltip'
import { Position } from '../../constants'

const DEFAULT_NODE = 'paragraph'

export default class SideMenu extends Component {
  state = {
    isOpen: false
  }
  static propTypes = {
    /**
     * The receiving editor. Must be passed to the SideMenu Component
     */
    editor: PropTypes.object
  }

  componentDidMount() {
    this.update()
  }

  componentDidUpdate() {
    this.update()
  }

  update = () => {
    const menu = this.menu
    if (!menu) return
    const { value, editor } = this.props

    const { fragment, selection } = value

    if (selection.isBlurred && !this.state.isOpen) {
      menu.style.opacity = 0
      return
    }

    try {
      const native = window.getSelection()
      const range = native.getRangeAt(0)
      const rect = range.getBoundingClientRect()
      console.log({ menuFromTop: menu.offsetTop, rectTop: rect.top })
      menu.style.top = `${rect.top + window.pageYOffset - menu.offsetHeight}px`
      menu.style.left = `${editor.props.padding / 2}px`
      menu.style.opacity = 1
    } catch (err) {}
  }

  render() {
    return (
      <Box position="absolute">
        <Popover
          statelessProps={{
            padding: 5,
            minWidth: 0
          }}
          onOpen={() => this.setState({ isOpen: true })}
          onClose={() => this.setState({ isOpen: false })}
          position={Position.BOTTOM_LEFT}
          content={
            <Box display="inline-flex">
              {this.renderBlockButton('heading-one', 'header-one', 'Header 1')}
              {this.renderBlockButton('heading-two', 'header-two', 'Header 2')}
              {this.renderBlockButton('block-quote', 'citation', 'Quote')}
              {this.renderBlockButton(
                'numbered-list',
                'numbered-list',
                'Numbered List'
              )}
              {this.renderBlockButton('bulleted-list', 'list', 'Bulleted List')}
            </Box>
          }
        >
          {({ toggle, getRef }) => (
            <IconButton
              position="absolute"
              left={10}
              innerRef={node => {
                this.menu = node
                return getRef(node)
              }}
              onClick={() => {
                if (!this.state.isOpen) toggle()
              }}
              appearance="minimal"
              borderRadius={50}
              icon="plus"
            />
          )}
        </Popover>
      </Box>
    )
  }

  hasBlock = type => {
    const { editor: { value } } = this.props
    return value.blocks.some(node => node.type === type)
  }

  renderBlockButton = (type, icon, tooltip) => {
    const { editor } = this.props

    let isActive = this.hasBlock(type)

    if (['numbered-list', 'bulleted-list'].includes(type)) {
      const { value: { document, blocks } } = editor
      if (blocks.size > 0) {
        const parent = document.getParent(blocks.first().key)
        isActive = this.hasBlock('list-item') && parent && parent.type === type
      }
    }

    return (
      <Tooltip content={tooltip}>
        <IconButton
          appearance={isActive ? 'primary' : 'minimal'}
          active={isActive}
          onMouseDown={event => this.onClickBlock(event, type)}
          icon={icon}
        />
      </Tooltip>
    )
  }

  onClickBlock = (event, type) => {
    event.preventDefault()

    const { editor } = this.props
    const { value } = editor
    const { document } = value

    // Handle everything but list buttons.
    if (type !== 'bulleted-list' && type !== 'numbered-list') {
      const isActive = this.hasBlock(type)
      const isList = this.hasBlock('list-item')

      if (isList) {
        editor
          .setBlocks(isActive ? DEFAULT_NODE : type)
          .unwrapBlock('bulleted-list')
          .unwrapBlock('numbered-list')
      } else {
        editor.setBlocks(isActive ? DEFAULT_NODE : type)
      }
    } else {
      // Handle the extra wrapping required for list buttons.
      const isList = this.hasBlock('list-item')
      const isType = value.blocks.some(block => {
        return !document.getClosest(block.key, parent => parent.type === type)
      })

      if (isList && isType) {
        editor
          .setBlocks(DEFAULT_NODE)
          .unwrapBlock('bulleted-list')
          .unwrapBlock('numbered-list')
      } else if (isList) {
        editor
          .unwrapBlock(
            type === 'bulleted-list' ? 'numbered-list' : 'bulleted-list'
          )
          .wrapBlock(type)
      } else {
        editor.setBlocks('list-item').wrapBlock(type)
      }
    }
    editor.focus()
  }
}
